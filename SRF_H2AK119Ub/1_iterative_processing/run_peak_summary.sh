#!/bin/bash

# Documentation:
# This script runs the 'generate_peak_summary.py' Python script to create a
# summary of peak counts from '*_metrics.csv' files.
# The Python script expects the data directory (containing the metric files
# and where 'summary.txt' will be written) as a command-line argument.

# Usage:
# ./run_peak_summary.sh [path_to_data_directory]
# If no path is provided, it defaults to 'analysis/5_peak_calling_v2'.
# Example (default):
# ./run_peak_summary.sh
# Example (custom path):
# ./run_peak_summary.sh path/to/my/data

# Requirements:
# - python3 must be installed and in the PATH.
# - The Python script 'generate_peak_summary.py' must exist in the 'scripts/'
#   directory relative to this shell script.
# - The target data directory provided as an argument must exist and contain
#   the relevant '*_metrics.csv' files.

# Input files (handled by the Python script, within the provided data directory):
# - <data_directory>/*_metrics.csv

# Output files (generated by the Python script, within the provided data directory):
# - <data_directory>/summary.txt
# - logs/run_peak_summary.log (log file for this script)

set -e  # Exit on error
set -u  # Exit on undefined variable
# set -x # Uncomment for debugging

# --- Argument Handling ---
DEFAULT_DATA_DIR="analysis/5_peak_calling_strict_v2"
# DEFAULT_DATA_DIR="analysis/5_peak_calling_v2"
DATA_DIR=""

if [ "$#" -eq 0 ]; then
    echo "No data directory provided. Using default: $DEFAULT_DATA_DIR"
    DATA_DIR="$DEFAULT_DATA_DIR"
elif [ "$#" -eq 1 ]; then
    DATA_DIR="$1"
    echo "Using provided data directory: $DATA_DIR"
else
    echo "Usage: $0 [path_to_data_directory]"
    echo "If no path is provided, it defaults to '$DEFAULT_DATA_DIR'."
    echo "Example (default): $0"
    echo "Example (custom path): $0 path/to/my/data"
    exit 1
fi

if [ ! -d "$DATA_DIR" ]; then
    echo "Error: Data directory '$DATA_DIR' not found."
    exit 1
fi
# Convert to absolute path for clarity in logs, though Python script also does this
DATA_DIR_ABS=$(cd "$DATA_DIR" && pwd)


# --- Configuration ---

# Define base directory relative to the script's location
WORKDIR="."
cd "$WORKDIR" || { echo "Error: Could not change to working directory $WORKDIR"; exit 1; }

# Define directory containing the Python script (relative to this shell script)
PYTHON_SCRIPT_SUBDIR="scripts"
LOG_DIR="logs"

# Python script to execute
PEAK_SUMMARY_SCRIPT="${PYTHON_SCRIPT_SUBDIR}/generate_peak_summary.py"

# --- Setup ---

# Create log directory
mkdir -p "$LOG_DIR"

# Log file
LOG_FILE="${LOG_DIR}/run_peak_summary.log"
exec > >(tee -a "$LOG_FILE") 2>&1 # Redirect stdout and stderr to log file and console

echo "--- Starting Peak Summary Generation ---"
echo "Timestamp: $(date)"
echo "Target Data Directory: $DATA_DIR_ABS"
echo "Python Script: $PEAK_SUMMARY_SCRIPT"
echo "Log File: $LOG_FILE"
echo "---------------------------------------"

# --- Main Processing ---

# Check if python3 is available
if ! command -v python3 &> /dev/null; then
    echo "Error: python3 command not found. Please install Python 3 and ensure it's in your PATH."
    exit 1
fi
echo "Found python3: $(command -v python3)"

# Check if the Python script exists
if [[ ! -f "$PEAK_SUMMARY_SCRIPT" ]]; then
    echo "Error: Peak summary Python script not found: $PEAK_SUMMARY_SCRIPT"
    echo "Ensure it is located at './scripts/generate_peak_summary.py' relative to this script."
    exit 1
fi
echo "Found Python script: $PEAK_SUMMARY_SCRIPT"

echo ""
echo "Executing Python script to generate peak summary from '$DATA_DIR_ABS'..."
if python3 "$PEAK_SUMMARY_SCRIPT" "$DATA_DIR_ABS"; then
    echo "Successfully executed $PEAK_SUMMARY_SCRIPT for directory $DATA_DIR_ABS"
    if [[ -f "${DATA_DIR_ABS}/summary.txt" ]]; then
        echo "Output file confirmed: ${DATA_DIR_ABS}/summary.txt"
    else
        echo "Warning: Output file ${DATA_DIR_ABS}/summary.txt not found after script execution. Check Python script logs."
    fi
else
    echo "Error: Failed to execute $PEAK_SUMMARY_SCRIPT for directory $DATA_DIR_ABS"
    # The script will exit here due to 'set -e', or Python script might exit with non-zero
fi

echo ""
echo "--- Peak Summary Generation Finished ---"
echo "Timestamp: $(date)"
echo "Log file: $LOG_FILE"
echo "Please check ${DATA_DIR_ABS}/summary.txt for the peak summary."
echo "Review $LOG_FILE and Python script output for details."
echo "---------------------------------------"