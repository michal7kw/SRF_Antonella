#!/bin/bash

# Documentation:
# This script identifies consensus peaks that are present in at least two replicates
# for each experimental condition (GFP and YAF). It uses the blacklist-filtered
# broadPeak files generated by the '5_peak_calling.sh' script.
# It relies on 'bedtools multiinter' to find overlapping regions.

# Requirements:
# - bedtools must be installed and in the PATH.
# - The '5_peak_calling*.sh' script must have been successfully run for all samples (indices 0-5),
#   generating the necessary '*_broad_peaks_final.broadPeak' files.

# Input files (relative to script location):
# - analysis/5_peak_calling*/GFP_1_broad_peaks_final.broadPeak
# - analysis/5_peak_calling*/GFP_2_broad_peaks_final.broadPeak
# - analysis/5_peak_calling*/GFP_3_broad_peaks_final.broadPeak
# - analysis/5_peak_calling*/YAF_1_broad_peaks_final.broadPeak
# - analysis/5_peak_calling*/YAF_2_broad_peaks_final.broadPeak
# - analysis/5_peak_calling*/YAF_3_broad_peaks_final.broadPeak

# Output files (relative to script location):
# - analysis/6_consensus_peaks/GFP_consensus_peaks.bed
# - analysis/6_consensus_peaks/YAF_consensus_peaks.bed
# - logs/6_consensus_peak_calling.log

set -e  # Exit on error
set -u  # Exit on undefined variable
# set -x # Uncomment for debugging

# --- Configuration ---

# Define base directory relative to the script's location
WORKDIR="."
cd "$WORKDIR" || { echo "Error: Could not change to working directory $WORKDIR"; exit 1; }

# Define input and output directories
PEAK_DIR="analysis/5_peak_calling_strict_v2"
OUTPUT_DIR="analysis/6_consensus_peaks_strict"
LOG_DIR="logs"

# Define replicate groups
declare -A REPLICATE_GROUPS
REPLICATE_GROUPS[GFP]="GFP_1 GFP_2 GFP_3"
REPLICATE_GROUPS[YAF]="YAF_1 YAF_2 YAF_3"

# Define minimum number of overlapping replicates
MIN_REPLICATES=2

# --- Setup ---

# Create output and log directories
mkdir -p "$OUTPUT_DIR"
mkdir -p "$LOG_DIR"

# Log file
LOG_FILE="${LOG_DIR}/6_consensus_peak_calling.log"
exec > >(tee -a "$LOG_FILE") 2>&1 # Redirect stdout and stderr to log file and console

echo "--- Starting Consensus Peak Calling ---"
echo "Timestamp: $(date)"
echo "Input Peak Directory: $PEAK_DIR"
echo "Output Directory: $OUTPUT_DIR"
echo "Minimum Replicates for Consensus: $MIN_REPLICATES"
echo "---------------------------------------"

# --- Main Processing ---

# Check if bedtools is available
if ! command -v bedtools &> /dev/null; then
    echo "Error: bedtools command not found. Please install bedtools and ensure it's in your PATH."
    exit 1
fi
echo "Found bedtools: $(command -v bedtools)"
echo "bedtools version: $(bedtools --version)"

# Process each condition group
for condition in "${!REPLICATE_GROUPS[@]}"; do
    echo ""
    echo "Processing condition: $condition"
    samples=(${REPLICATE_GROUPS[$condition]})
    input_files=()
    missing_files=0

    # Check for input files and build the list for bedtools
    echo "Checking input files for $condition:"
    for sample in "${samples[@]}"; do
        peak_file="${PEAK_DIR}/${sample}_broad_peaks_final.broadPeak"
        if [[ -f "$peak_file" ]]; then
            echo "  Found: $peak_file"
            # Select only the first 6 columns (standard BED6) for intersection
            # Sort BED file for bedtools robustness
            sorted_tmp="${OUTPUT_DIR}/${sample}_sorted.bed"
            awk 'BEGIN{OFS="\t"} {print $1, $2, $3, $4, $5, $6}' "$peak_file" | sort -k1,1 -k2,2n > "$sorted_tmp"
            input_files+=("$sorted_tmp")
        else
            echo "  Error: Input file not found: $peak_file"
            missing_files=1
        fi
    done

    if [[ $missing_files -eq 1 ]]; then
        echo "Error: Missing input files for condition $condition. Skipping consensus peak calling for this condition."
        continue # Skip to the next condition
    fi

    if [[ ${#input_files[@]} -lt $MIN_REPLICATES ]]; then
         echo "Error: Fewer input files (${#input_files[@]}) found than minimum required replicates ($MIN_REPLICATES) for condition $condition. Skipping."
         continue
    fi

    # Define output file for the consensus peaks
    output_consensus_bed="${OUTPUT_DIR}/${condition}_consensus_peaks.bed"
    output_multiinter_tmp="${OUTPUT_DIR}/${condition}_multiinter.tmp"

    echo "Running bedtools multiinter for $condition..."
    echo "Command: bedtools multiinter -i ${input_files[@]}"

    # Run bedtools multiinter
    # The output format is: chr, start, end, num_overlapping, list_of_overlapping_indices, list_of_overlapping_files
    bedtools multiinter -i "${input_files[@]}" > "$output_multiinter_tmp"

    echo "Filtering for peaks present in at least $MIN_REPLICATES replicates..."
    # Filter results: Keep intervals overlapping in at least MIN_REPLICATES files
    # Output standard BED format (chr, start, end)
    # We add a name column indicating the number of overlaps
    awk -v min_rep="$MIN_REPLICATES" 'BEGIN{OFS="\t"} $4 >= min_rep {print $1, $2, $3, "consensus_peak_"NR"_overlaps"$4, $4, "."}' "$output_multiinter_tmp" > "$output_consensus_bed"

    # Optional: Merge overlapping/book-ended consensus intervals
    echo "Merging overlapping consensus intervals..."
    merged_output_bed="${OUTPUT_DIR}/${condition}_consensus_peaks_merged.bed"
    bedtools merge -i "$output_consensus_bed" -c 4,5 -o distinct,mean > "$merged_output_bed"
    # Rename the merged file to the final name
    mv "$merged_output_bed" "$output_consensus_bed"


    # Clean up temporary sorted files
    echo "Cleaning up temporary files..."
    rm "${input_files[@]}" "$output_multiinter_tmp"

    # Report results
    if [[ -f "$output_consensus_bed" ]]; then
        peak_count=$(wc -l < "$output_consensus_bed" | awk '{print $1}')
        echo "Successfully generated consensus peaks for $condition: $output_consensus_bed"
        echo "Number of consensus peaks found: $peak_count"
    else
        echo "Error: Failed to generate consensus peaks for $condition."
    fi
done

echo ""
echo "--- Consensus Peak Calling Finished ---"
echo "Timestamp: $(date)"
echo "Log file: $LOG_FILE"
echo "---------------------------------------"