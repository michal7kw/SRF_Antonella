import os
from glob import glob
# Configuration
configfile: "config.yaml"

# Define samples from config
SAMPLES = config["samples"]
CONDITIONS = config["conditions"]

# Directory structure
WORKDIR = config["workdir"]
COMMON_DATA_DIR = "/beegfs/scratch/ric.broccoli/kubacki.michal/SRF_H2AK119Ub_cross_V5/COMMON_DATA"
GENOME_DIR = os.path.join(COMMON_DATA_DIR, "genome")
LOGS_DIR = os.path.join(WORKDIR, "logs")
ANALYSIS_DIR = os.path.join(WORKDIR, "results")
DATA_DIR = os.path.join(WORKDIR, "DATA")

# Create directory structure
for d in [LOGS_DIR] + [
    os.path.join(ANALYSIS_DIR, subdir) for subdir in [
        "fastqc/pre_trim", "fastqc/post_trim", "trimmed", "aligned",
        "peaks", "visualization", "qc", "annotation", "diffbind_broad",
        "annotation_broad", "plots_broad", "overlap_analysis_broad",
        "go_enrichment_broad"
    ]
]:
    os.makedirs(d, exist_ok=True)

rule all:
    input:
        expand(os.path.join(GENOME_DIR, "{file}"),
               file=["Homo_sapiens.GRCh38.dna.primary_assembly.fa", "GRCh38.1.bt2"]),
        expand(os.path.join(ANALYSIS_DIR, "fastqc/pre_trim/{sample}_R{read}_001_fastqc.html"),
               sample=SAMPLES, read=[1,2]),
        expand(os.path.join(ANALYSIS_DIR, "fastqc/post_trim/{sample}_R{read}_paired_fastqc.html"),
               sample=SAMPLES, read=[1,2]),
        expand(os.path.join(ANALYSIS_DIR, "aligned/{sample}.dedup.bam"),
               sample=SAMPLES),
        expand(os.path.join(ANALYSIS_DIR, "aligned/{sample}.dedup.bam.bai"),
               sample=SAMPLES),
        expand(os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_peaks_final.broadPeak"),
               sample=SAMPLES),
        os.path.join(ANALYSIS_DIR, "diffbind_broad/differential_peaks.csv"),
        os.path.join(ANALYSIS_DIR, "diffbind_broad/dba_analysis.rds"),
        os.path.join(ANALYSIS_DIR, "annotation_broad/peak_annotation.rds"),
        os.path.join(ANALYSIS_DIR, "annotation_broad/peak_annotation.csv"),
        os.path.join(ANALYSIS_DIR, "go_enrichment_broad/enrichment_results.csv"),
        os.path.join(ANALYSIS_DIR, "multiqc/multiqc_report.html")

rule trimmomatic:
    input:
        r1=os.path.join(DATA_DIR, "fastq/{sample}_R1_001.fastq.gz"),
        r2=os.path.join(DATA_DIR, "fastq/{sample}_R2_001.fastq.gz")
    output:
        r1_paired=os.path.join(ANALYSIS_DIR, "trimmed/{sample}_R1_paired.fastq.gz"),
        r1_unpaired=os.path.join(ANALYSIS_DIR, "trimmed/{sample}_R1_unpaired.fastq.gz"),
        r2_paired=os.path.join(ANALYSIS_DIR, "trimmed/{sample}_R2_paired.fastq.gz"),
        r2_unpaired=os.path.join(ANALYSIS_DIR, "trimmed/{sample}_R2_unpaired.fastq.gz")
    log:
        os.path.join(LOGS_DIR, "trimming/{sample}.trimmomatic.log")
    threads: 16
    resources:
        mem_mb=32000,
        runtime=240
    shell:
        """
        trimmomatic PE -threads {threads} \
            {input.r1} {input.r2} \
            {output.r1_paired} {output.r1_unpaired} \
            {output.r2_paired} {output.r2_unpaired} \
            ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 \
            LEADING:20 TRAILING:20 \
            SLIDINGWINDOW:4:15 \
            MINLEN:25 2> {log}
        """

rule align:
    input:
        r1=rules.trimmomatic.output.r1_paired,
        r2=rules.trimmomatic.output.r2_paired
    output:
        temp(os.path.join(ANALYSIS_DIR, "aligned/{sample}.sam"))
    log:
        os.path.join(LOGS_DIR, "alignment/{sample}.align.log")
    params:
        index=os.path.join(GENOME_DIR, "GRCh38")
    threads: 32
    resources:
        mem_mb=64000,
        runtime=1440
    shell:
        """
        bowtie2 -p {threads} \
            -x {params.index} \
            --local --very-sensitive-local \
            --no-mixed --no-discordant \
            -I 0 -X 1000 \
            -1 {input.r1} \
            -2 {input.r2} \
            -S {output} 2> {log}
        """

rule sam_to_bam:
    input:
        rules.align.output[0]
    output:
        temp(os.path.join(ANALYSIS_DIR, "aligned/{sample}.bam"))
    log:
        os.path.join(LOGS_DIR, "alignment/{sample}.sam_to_bam.log")
    threads: 8
    resources:
        mem_mb=16000,
        runtime=120
    shell:
        "samtools view -@ {threads} -bh -F 4 {input} > {output} 2> {log}"

rule sort_bam:
    input:
        rules.sam_to_bam.output[0]
    output:
        temp(os.path.join(ANALYSIS_DIR, "aligned/{sample}.sorted.bam"))
    log:
        os.path.join(LOGS_DIR, "alignment/{sample}.sort.log")
    threads: 8
    resources:
        mem_mb=32000,
        runtime=240
    shell:
        "samtools sort -@ {threads} -m 2G {input} -o {output} 2> {log}"

rule mark_duplicates:
    input:
        rules.sort_bam.output[0]
    output:
        bam=os.path.join(ANALYSIS_DIR, "aligned/{sample}.dedup.bam"),
        metrics=os.path.join(ANALYSIS_DIR, "qc/{sample}_dup_metrics.txt")
    log:
        os.path.join(LOGS_DIR, "alignment/{sample}.dedup.log")
    threads: 8
    resources:
        mem_mb=48000,
        runtime=480
    shell:
        """
        picard MarkDuplicates \
            I={input} \
            O={output.bam} \
            M={output.metrics} \
            REMOVE_DUPLICATES=false \
            OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 \
            VALIDATION_STRINGENCY=LENIENT 2> {log}
        """

rule index_bam:
    input:
        rules.mark_duplicates.output.bam
    output:
        os.path.join(ANALYSIS_DIR, "aligned/{sample}.dedup.bam.bai")
    log:
        os.path.join(LOGS_DIR, "alignment/{sample}.index.log")
    threads: 4
    resources:
        mem_mb=8000,
        runtime=60
    shell:
        "samtools index {input} {output} 2> {log}"

rule call_peaks:
    input:
        bam=rules.mark_duplicates.output.bam,
        bai=rules.index_bam.output
    output:
        peaks=os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_peaks.broadPeak"),
        summits=os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_summits.bed"),
        bdg=os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_treat_pileup.bdg")
    log:
        os.path.join(LOGS_DIR, "peaks/{sample}.macs2.log")
    params:
        name="{sample}_broad",
        outdir=os.path.join(ANALYSIS_DIR, "peaks")
    threads: 8
    resources:
        mem_mb=32000,
        runtime=480
    shell:
        """
        macs2 callpeak \
            -t {input.bam} \
            -f BAMPE \
            -g hs \
            --broad \
            -n {params.name} \
            --outdir {params.outdir} \
            -q 0.05 \
            --broad-cutoff 0.05 \
            --keep-dup 1 \
            --min-length 500 \
            --bdg \
            --buffer-size 10000 2> {log}
        """

rule filter_peaks:
    input:
        rules.call_peaks.output.peaks
    output:
        os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_peaks_final.broadPeak")
    log:
        os.path.join(LOGS_DIR, "peaks/{sample}.filter.log")
    threads: 1
    resources:
        mem_mb=4000,
        runtime=30
    shell:
        """
        awk 'BEGIN{{OFS="\t"}} {{
            len = $3 - $2;
            if($7 >= 3 && len >= 500 && len <= 10000)
                print $0
        }}' {input} > {output} 2> {log}
        """

rule differential_binding:
    input:
        peaks=expand(os.path.join(ANALYSIS_DIR, "peaks/{sample}_broad_peaks_final.broadPeak"),
                    sample=SAMPLES),
        bams=expand(os.path.join(ANALYSIS_DIR, "aligned/{sample}.dedup.bam"),
                   sample=SAMPLES)
    output:
        csv=os.path.join(ANALYSIS_DIR, "diffbind_broad/differential_peaks.csv"),
        rds=os.path.join(ANALYSIS_DIR, "diffbind_broad/dba_analysis.rds")
    log:
        os.path.join(LOGS_DIR, "diffbind/differential_binding.log")
    threads: 16
    resources:
        mem_mb=64000,
        runtime=480
    script:
        "scripts/5_differential_binding.R"

rule annotate_peaks:
    input:
        rules.differential_binding.output.rds
    output:
        rds=os.path.join(ANALYSIS_DIR, "annotation_broad/peak_annotation.rds"),
        csv=os.path.join(ANALYSIS_DIR, "annotation_broad/peak_annotation.csv")
    log:
        os.path.join(LOGS_DIR, "annotation/annotate_peaks.log")
    threads: 8
    resources:
        mem_mb=32000,
        runtime=240
    script:
        "scripts/6_annotation_and_enrichment.R"

rule go_enrichment:
    input:
        os.path.join(ANALYSIS_DIR, "annotation_broad/peak_annotation.csv")
    output:
        os.path.join(ANALYSIS_DIR, "go_enrichment_broad/enrichment_results.csv")
    log:
        os.path.join(LOGS_DIR, "go_enrichment/go_analysis.log")
    threads: 8
    resources:
        mem_mb=32000,
        runtime=240
    script:
        "scripts/10_go_enrichment.py"

rule fastqc_pre_trim:
    input:
        r1=os.path.join(DATA_DIR, "fastq/{sample}_R1_001.fastq.gz"),
        r2=os.path.join(DATA_DIR, "fastq/{sample}_R2_001.fastq.gz")
    output:
        r1=os.path.join(ANALYSIS_DIR, "fastqc/pre_trim/{sample}_R1_001_fastqc.html"),
        r2=os.path.join(ANALYSIS_DIR, "fastqc/pre_trim/{sample}_R2_001_fastqc.html")
    log:
        os.path.join(LOGS_DIR, "fastqc/{sample}_pre_trim.log")
    threads: 4
    shell:
        """
        fastqc -t {threads} {input.r1} {input.r2} -o {ANALYSIS_DIR}/fastqc/pre_trim > {log} 2>&1
        """

rule fastqc_post_trim:
    input:
        r1=rules.trimmomatic.output.r1_paired,
        r2=rules.trimmomatic.output.r2_paired
    output:
        r1=os.path.join(ANALYSIS_DIR, "fastqc/post_trim/{sample}_R1_paired_fastqc.html"),
        r2=os.path.join(ANALYSIS_DIR, "fastqc/post_trim/{sample}_R2_paired_fastqc.html")
    log:
        os.path.join(LOGS_DIR, "fastqc/{sample}_post_trim.log")
    threads: 4
    shell:
        """
        fastqc -t {threads} {input.r1} {input.r2} -o {ANALYSIS_DIR}/fastqc/post_trim > {log} 2>&1
        """

rule multiqc:
    input:
        fastqc_pre=expand(os.path.join(ANALYSIS_DIR, "fastqc/pre_trim/{sample}_R{read}_001_fastqc.html"),
                         sample=SAMPLES, read=[1,2]),
        fastqc_post=expand(os.path.join(ANALYSIS_DIR, "fastqc/post_trim/{sample}_R{read}_paired_fastqc.html"),
                          sample=SAMPLES, read=[1,2]),
        dup_metrics=expand(os.path.join(ANALYSIS_DIR, "qc/{sample}_dup_metrics.txt"),
                         sample=SAMPLES)
    output:
        os.path.join(ANALYSIS_DIR, "multiqc/multiqc_report.html")
    log:
        os.path.join(LOGS_DIR, "multiqc/multiqc.log")
    params:
        analysis_dir=ANALYSIS_DIR
    threads: 1
    resources:
        mem_mb=4000,
        runtime=60
    shell:
        "multiqc {params.analysis_dir} -o {ANALYSIS_DIR}/multiqc 2> {log}"